(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-0136acfa"],{"4e84":function(t,e,n){},b092:function(t,e,n){"use strict";n.r(e);var a=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{},[n("nav",{staticClass:"vital-container cb bb-1"},[n("strong",{staticClass:"fl mt-10 f16"},[t._v("API")]),t._v(" "),n("div",{staticClass:"fr"},[n("el-button",{staticClass:"filter-item shadow",attrs:{type:"primary",size:"small",icon:"el-icon-document-copy"},on:{click:t.createData}},[t._v("Download")])],1)]),t._v(" "),t._m(0),t._v(" "),t._m(1)])},i=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("section",{staticClass:"bg-color-white p25"},[n("div",{staticClass:"bc mb-20"},[n("div",{staticClass:"f15"},[n("strong",[t._v("First all, please make sure docker is installed in your\n            environment.")]),t._v("\n          After downloading the docker image file of your model\n          "),n("span",{staticClass:"color-8"},[t._v("(e.g., test.tar)")])]),t._v(" "),n("pre",{staticClass:"bg-color-gray p15 radius5"},[t._v("1. docker load -i /your image path/test.tar\n\n2. docker run -d --network host --name mytest run “pip:test”")]),t._v(" "),n("h4",{staticClass:"color-red"},[t._v("Notes:")]),t._v(" "),n("div",{staticClass:"bd-1-black p15 radius5"},[n("p",[t._v("\n            1. The default tag of your docker image is the name of downloaded\n            tar file. In the above example, the tag of test.tar is pip:test.\n          ")]),t._v(" "),n("p",[t._v("\n            2. The parameters of running docker should be adjusted according to\n            your network.\n          ")]),t._v(" "),n("p",[t._v("\n            3. The default port of docker is 8080. Use server.port to customize\n            it, e.g. docker run -d --network run “pip:test” --server.port 9999\n          ")])])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("section",{staticClass:"radius5 bg-color-white p25"},[n("div",{staticClass:"bc mb-20"},[n("div",{staticClass:"f15"},[n("strong",[t._v("\n            Once the model is initiated, simply call the API with two\n            parameters: id of the model and text to be processed:\n          ")])]),t._v(" "),n("pre",{staticClass:"bg-color-gray p15 radius5"},[t._v('\n{"pipelineId":"test","text":"hi,i am  diabetes and cancer patients"}\n\ncurl -X POST --header \'Content-Type: application/json\' --header \'Accept: application/json\' -d \'{"pipelineId":"test","text":"hi,i am  diabetes and cancer patients"}\' \'http://127.0.0.1:8080/query/brat\'\n{\n  "docentiry": [\n    {\n      "id": 0,\n      "docId": "xx",\n      "startPos": 9,\n      "endPos": 17,\n      "semType": "clinical_finding",\n      "seert": null,\n      "entText": "diabetes",\n      "code": null,\n      "attr1": null,\n      "attr2": "",\n      "attr3": "",\n      "attr4": ""\n    },\n    {\n      "id": 0,\n      "docId": "xx",\n      "startPos": 22,\n      "endPos": 37,\n      "semType": "clinical_finding",\n      "seert": null,\n      "entText": "cancer patients",\n      "code": null,\n      "attr1": null,\n      "attr2": "",\n      "attr3": "",\n      "attr4": ""\n    }\n  ],\n  "bratFile": "{\\"text\\":\\"hi,i am  diabetes and cancer patients\\",\\"entities\\":[[\\"T0\\",\\"clinical_finding\\",[[9,17]]],[\\"T1\\",\\"clinical_finding\\",[[22,37]]]],\\"relations\\":[]}",\n  "bratSem": "{\\"entity_types\\":[{\\"type\\":\\"clinical_finding\\",\\"labels\\":[\\"clinical_finding\\"],\\"bgColor\\":\\"#00FF00\\",\\"borderColor\\":\\"darken\\"}],\\"entity_attribute_types\\":[],\\"relation_types\\":[],\\"event_types\\":[]}"\n}\n        ')])])])}],s={components:{},props:{},data:function(){return{}},computed:{},watch:{},created:function(){},mounted:function(){},methods:{}},r=s,o=(n("fb91"),n("9ca4")),c=Object(o["a"])(r,a,i,!1,null,"636ebe0b",null);e["default"]=c.exports},fb91:function(t,e,n){"use strict";var a=n("4e84"),i=n.n(a);i.a}}]);